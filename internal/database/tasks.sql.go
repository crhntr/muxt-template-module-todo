// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package database

import (
	"context"
)

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, db DBTX, id int64) error {
	_, err := db.Exec(ctx, deleteTask, id)
	return err
}

const insertTask = `-- name: InsertTask :one
INSERT INTO tasks (list_id, description) VALUES ($1, $2) RETURNING id, list_id, description, created_at, completed_at
`

type InsertTaskParams struct {
	ListID      int64
	Description string
}

func (q *Queries) InsertTask(ctx context.Context, db DBTX, arg InsertTaskParams) (Task, error) {
	row := db.QueryRow(ctx, insertTask, arg.ListID, arg.Description)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const selectTasksForList = `-- name: SelectTasksForList :many
SELECT id, list_id, description, created_at, completed_at FROM tasks WHERE list_id = $1
`

func (q *Queries) SelectTasksForList(ctx context.Context, db DBTX, listID int64) ([]Task, error) {
	rows, err := db.Query(ctx, selectTasksForList, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskSetCompletedAtNow = `-- name: UpdateTaskSetCompletedAtNow :one
UPDATE tasks SET completed_at = NOW() WHERE id = $1 RETURNING id, list_id, description, created_at, completed_at
`

func (q *Queries) UpdateTaskSetCompletedAtNow(ctx context.Context, db DBTX, id int64) (Task, error) {
	row := db.QueryRow(ctx, updateTaskSetCompletedAtNow, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}
