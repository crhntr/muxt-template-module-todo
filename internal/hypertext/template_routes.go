// Code generated by muxt. DO NOT EDIT.

package hypertext

import (
	"bytes"
	"context"
	"net/http"
	"strconv"
)

type RoutesReceiver interface {
	PostList(ctx context.Context, params PostListValues) PostListResult
	DeleteList(ctx context.Context, id int64) error
	GetList(ctx context.Context, id int64) ListData
	PatchTaskComplete(ctx context.Context, id int64) PatchTaskDoneData
	PostTask(ctx context.Context, values PostTaskValues) PostTaskResult
	Index(ctx context.Context) IndexData
}

func TemplateRoutes(mux *http.ServeMux, receiver RoutesReceiver) {
	mux.HandleFunc("POST /list", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		request.ParseForm()
		var form PostListValues
		form.Name = request.FormValue("Name")
		form.Description = request.FormValue("Description")
		data := receiver.PostList(ctx, form)
		execute(response, request, true, "POST /list PostList(ctx, form)", http.StatusOK, data)
	})
	mux.HandleFunc("GET /list/create", func(response http.ResponseWriter, request *http.Request) {
		execute(response, request, true, "GET /list/create", http.StatusOK, request)
	})
	mux.HandleFunc("DELETE /list/{id}", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		idParsed, err := strconv.ParseInt(request.PathValue("id"), 10, 64)
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		id := idParsed
		data := receiver.DeleteList(ctx, id)
		execute(response, request, true, "DELETE /list/{id} DeleteList(ctx, id)", http.StatusOK, data)
	})
	mux.HandleFunc("GET /list/{id}", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		idParsed, err := strconv.ParseInt(request.PathValue("id"), 10, 64)
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		id := idParsed
		data := receiver.GetList(ctx, id)
		execute(response, request, true, "GET /list/{id} GetList(ctx, id)", http.StatusOK, data)
	})
	mux.HandleFunc("PATCH /task/{id}/complete", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		idParsed, err := strconv.ParseInt(request.PathValue("id"), 10, 64)
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		id := idParsed
		data := receiver.PatchTaskComplete(ctx, id)
		execute(response, request, true, "PATCH /task/{id}/complete PatchTaskComplete(ctx, id)", http.StatusOK, data)
	})
	mux.HandleFunc("POST /tasks", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		request.ParseForm()
		var form PostTaskValues
		{
			value, err := strconv.ParseInt(request.FormValue("ListID"), 10, 64)
			if err != nil {
				http.Error(response, err.Error(), http.StatusBadRequest)
				return
			}
			form.ListID = value
		}
		form.Description = request.FormValue("Description")
		data := receiver.PostTask(ctx, form)
		execute(response, request, true, "POST /tasks PostTask(ctx, form)", http.StatusOK, data)
	})
	mux.HandleFunc("GET /{$}", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		data := receiver.Index(ctx)
		execute(response, request, true, "GET /{$} Index(ctx)", http.StatusOK, data)
	})
}
func execute(response http.ResponseWriter, request *http.Request, writeHeader bool, name string, code int, data any) {
	buf := bytes.NewBuffer(nil)
	if err := templates.ExecuteTemplate(buf, name, data); err != nil {
		http.Error(response, err.Error(), http.StatusInternalServerError)
		return
	}
	if writeHeader {
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.WriteHeader(code)
	}
	_, _ = buf.WriteTo(response)
}
